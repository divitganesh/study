
    Java

it is an open source

extension .jar || .java

precent version java24

it is platform independent

java recent version is 24



java structure 

--------------

class main{

public static void main(String args []){

System.out.print("hi");

}

}

java  ->(JDK,JRE,JVM)

JDK-JDK is used to write and compile code .it contain with(JER,JVM)

JRE-JER is used to run a java application on a system . it contain with (libraries, JVM)

JVM-JVM is used to convert a byte code to system code .

------------
java data type

java data type is used to predefined the type and size of value

data type
 
->primitive data type(fixed size)-> byte(1),short(2),int(4),long(8),float(4),double(8),char(2),Boolean(1).

->nonprimitive type(not a fixed size)->array,classea.

Data Type	Memory Size		Description
-------------------------------------------------------------------------------
byte		1 byte		Stores whole numbers from -128 to 127
short		2 bytes		Stores whole numbers from -32,768 to 32,767
int		4 bytes		Stores whole numbers from -2,147,483,648 to 2,147,483,647
long		8 bytes		Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807


float		4 bytes		Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
double		8 bytes		Stores fractional numbers. Sufficient for storing 15 decimal digits

boolean		1 bit		Stores true or false values
char		2 bytes		Stores a single character/letter or ASCII values

-----------
java variable 

variable is need to unique 

it should not contain with space 

it storage to value 

eg: int a=10;
        |->variable

----------

type casting 

type casting is used to convert one primitive type to another primitive type

two type 

widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double


Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte

Automatic type casting
------------------------
Ex1
----
int mynumber=12;
double doubleNumber=mynumber;

System.out.println(doubleNumber);

Ex2
----
        char ch='Z';
        int result=ch;//90

        System.out.println(result);



manually  or Narrowing type casting
------------------------------------

Ex1:
----
  int number=65;
  char ch=(char)number;

  System.out.println(ch);

Ex2:
-----
       double d=3.456;
        int r=(int)d;
        System.out.println(r);


Operators
----------
It is a Symbol used to perform Operations..

Types of Operators
----------------------
Arithmetic Operators
Relational or Comparison Operators
Logical Operators
Assignment Operators
Bitwise Operators
Ternary Operator


Arithmetic Operators
----------------------
+
-
*
/
%

Example
--------
package com.mypack;

public class OperatorDemo {
    public static void main(String[] args) {
        int n1=12;
        int n2=2;
        int add=n1+n2;
        System.out.println(add);
        System.out.println(n1-n2);

        System.out.println(n1*n2);
        System.out.println(n1/n2);
        System.out.println(n1%n2);
    }
}


Increment operator
-----------------
Post Increment
----------------
VariableName++;

n1++;//12 13
        System.out.println(n1);

  //n1++;//12 13
        System.out.println(n1++);//12 13
        System.out.println(n1);//13

Pre Increment
--------------
++VariableName;


 ++n2;//3 3
        System.out.println(n2);//3



Example
----------
package com.mypack;

public class OperatorDemo {
    public static void main(String[] args) {
        int n1=12;
        int n2=2;
        int add=n1+n2;
        System.out.println(add);
        System.out.println(n1-n2);

        System.out.println(n1*n2);
        System.out.println(n1/n2);
        System.out.println(n1%n2);
        System.out.println("--------------------------------");
        //n1++;//12 13
        System.out.println(n1++);//12 13
        System.out.println(n1);//13



        System.out.println(++n2);//3 3
        System.out.println(n2);//3
        System.out.println(n2++);//3 4
        System.out.println(n2);//4
    }
}



Scanner Class
--------------
Used to get input from the user...


java.util Package Name
Scanner class Name


Example
-------
package com.mypack;

import java.util.Scanner;

public class ScannerDemo {



    public static void main(String[] args) {

        //Object Create  className objectName=new ClassName();
        Scanner sc=new Scanner(System.in);
//        System.out.println("Enter a number:");
//        int n=sc.nextInt();
//
//        System.out.println("Enter ur salary:");
//        float salary=sc.nextFloat();

//        System.out.println("Enter ur name:");
//        String name=sc.nextLine();


//        System.out.println(n);
//        System.out.println("Salary is:"+salary);
//        System.out.println("Name is:"+name);

        System.out.println("Enter ur double value:");
        double d=sc.nextDouble();
        System.out.println(d);

    }
}


Example 2
-----------
        import java.util.Scanner;
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur age:");
        int age=sc.nextInt();

        String voteEligible= age>=18 ? "Eligible":"Not Eligible";
        System.out.println(voteEligible);











-------------------------
Flow control
-------------
Flow control describe the order in which the statements will be executed at runtime.

Selection statements or conditional or decision statement
----------------------------------------------------------
Java If-else Statement
The java  if statement is used to test the condition. 
It checks boolean condition: true or false.

There are various types of if statement in Java.
--------------------------------------------------
if statement
if-else statement
if-else-if ladder
nested if statement
Switch statement

if statement
-------------
The Java if statement tests the condition. It executes the if block if condition is true.

Syntax
-------
if(condition)
{
//code to be executed if the condition true
}

Example
--------
package com.mypack;

import java.util.Scanner;

public class ConditionalDemo {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur age:");

        int age=sc.nextInt();

        if(age>=18)
        {
            System.out.println("Eligible");
        }
     

    }
}



if-else statement
------------------
The Java if-else statement also tests the condition. It executes the if block if condition is true otherwise else block is executed.

Syntax
-------
if(condition)
{
//code to be executed if the condition true

}
else
{
//code to be executed if the condition false

}

Example
-------
package com.mypack;

import java.util.Scanner;

public class ConditionalDemo {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur age:");

        int age=sc.nextInt();

        if(age>=18)
        {
            System.out.println("Eligible");
        }
        else
        {
            System.out.println("Not Eligible");
        }

    }
}



if-else-if ladder
------------------
The if-else-if ladder statement executes one condition from multiple statements.

Syntax:
-------
if(condition1)
{  
//code to be executed if condition1 is true  
}
else if(condition2)
{  
//code to be executed if condition2 is true  
}  
else if(condition3)
{  
//code to be executed if condition3 is true  
}  
else
{  
//code to be executed if all the conditions are false  
} 


Example
--------
package com.mypack;

import java.util.Scanner;

public class ConditionalDemo {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur mark:");

        int mark=sc.nextInt();
//        90-100--->A grade
//        80-90--->B grade

        if(mark>=90 && mark<=100)
        {
            System.out.println("A grade");
        }
        else if(mark>=80 && mark<90)
        {
            System.out.println("B grade");
        }
        else
        {
            System.out.println("U grade");
        }

    }
}




nested if statement
--------------------
The nested if statement represents the if block within another if block. Here, the inner if block condition executes only when outer if block condition is true.

Syntax:
---------
if(condition)//outer if
{    
     //code to be executed    
if(condition)
{  
             //code to be executed    
    }   
else
{

} 
}  
else
{


}

Example
--------
 System.out.println("Enter ur age and Weight:");
        int age=sc.nextInt();
        int weight=sc.nextInt();
        if(age>=18)
        {
            if(weight>=60)
            {
                System.out.println("Eligible to donate a blood");
            }
            else {
                System.out.println("NotEligible due to insufficient Weight");

            }
        }
        else
        {
            System.out.println("NotEligible due to insufficient Age");

        }




Switch statement
------------------

If several options are available then it is not recommended to use if-else we should go 
for switch statement.

The Java switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement. 

Until 1.4 version the allow types for the switch argument are byte, short, char, int but 
from 1.5 version on wards the corresponding wrapper classes (Byte, Short, Character, 
Integer) and “enum” types are allowed.


Syntax
-------
switch(expression)
{    
case value1:    
 //code to be executed;    
 break;  

case value2:    
 //code to be executed;    
 break;  
......    
    
default:     
 code to be executed if all cases are not matched;    
}  


Curly braces are mandatory. 
Both case and default are optional. 
Every statement inside switch must be under some case (or) default. Independent 


Example
--------
package com.mypack;

public class SwitchDemo {
    public static void main(String[] args) {

        int day=1;
      switch (day)
      {
          case 1:
              System.out.println("Sun");
              break;
          case 2:
              System.out.println("Mon");
              break;
          case 3:
              System.out.println("Tue");
              break;
          case 4:
              System.out.println("Wed");
              break;
          case 5:
              System.out.println("Thu");
              break;
          case 6:
              System.out.println("Fri");
              break;
          case 7:
              System.out.println("Sat");
              break;
          default:
              System.out.println("Invalid day");
      }

    }
}


Using String
-------------
package com.mypack;

public class SwitchDemo {
    public static void main(String[] args) {


        String fruit="Apple";
      switch (fruit)
      {
          case "Apple":
              System.out.println("Apple");
              break;
          case "Banana":
              System.out.println("Banana");
              break;
          case "Orange":
              System.out.println("Orange");
              break;
          default:
              System.out.println("Invalid");
      }

    }
}


char
-----
package com.mypack;

public class SwitchDemo {
    public static void main(String[] args) {

        char ch='Z';
      switch (ch)
      {
          case 'A':

          case 'E':
          case 'I':

          case 'O':

          case 'U':
              System.out.println("vow");
              break;
          default:
              System.out.println("Consonant");
      }

    }
}


Selector type of 'double' is not supported...







Loop or Iterative Statement
----------------------------
while
do-while
for loop

target-->50  stop (condition) 1<=50
starts--->1  initialization
Count---->||||||||||||||||| (increment/decrement)




while loop
----------
if we don’t know the no of iterations in advance then best loop is while loop.

Syntax
------
while(condition)
{
//code to be executed

}


Example
-------
package com.mypack;

public class LoopDemo {
    public static void main(String[] args) {
//        System.out.println("Hii");
        int start=1;
        while(start<=10)
        {
            System.out.println("Hii");
            start++;
        }
        System.out.println("Outside of the loop");

    }
}


package com.mypack;

public class LoopDemo {
    public static void main(String[] args) {
//        System.out.println("Hii");
        int start=1;
        while(start<=5)
        {
            System.out.println(start);
            start++;
        }
        System.out.println("Outside of the loop");
        /*
        start=1
        1<=5 true 
        
        inside the loop body prints 1
        start++ 2
        2<=5 true inside the loop prints 2
        3<=5 true inside the loop prints 3
         4<=5 true inside the loop prints 4
        5<=5 true inside the loop prints 5
        6<=5 false loop stop
        
         */

    }
}


infinite loop
-------------
while(true)
{

}

        int start=1;
        while(start<=5)
        {
            System.out.println(start);
        }
        System.out.println("Outside of the loop");



5
4
3
2
1

int start=5;
while(start>=1)
{
sout(start);

start--;

}






Do-while
---------
If we want to execute loop body at least once then we should go for do-while. 

Syntax
------
do
{


}while(condition);


Example
===-===
   int i=1;

        do{
            System.out.println(i);
            i++;
        }while(i<=10);




int i=1;

        do{
            i++;
            System.out.println(i);

        }while(i<=10);



      int i=10;

        do{
            System.out.println(i);
            i--;

        }while(i>=1);

For Loop
--------
This is the most commonly used loop and best suitable if we know the no of iterations in 
advance.

syntax
------
for(initialization;condition;incr/decre)
{



}

Example
--------
for(int i=1;i<=10;i++)
        {
            System.out.println(i);
        }

int i=1;
        for(System.out.println("Hii");i<=3;i++)
        {
            System.out.println(i);
        }

output
------
Hii
1
2
3




int i=1;
        for(System.out.println("Hii");i<=3;System.out.println("Hello"))
        {
            System.out.println(i);
            i++;
        }


Output
--------
Hii
1
Hello
2
Hello
3
Hello


Infinite loop
--------------
  for(;;)
        {
            System.out.println("Hii");
        }




Example even number 
-----------
      Scanner sc=new Scanner(System.in);
        System.out.println("Enter a number:");
        int n=sc.nextInt();

        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                System.out.println("Even:"+i);

            }
        }

sc.close();


or


      Scanner sc=new Scanner(System.in);
        System.out.println("Enter a number:");
        int n=sc.nextInt();

        for(int i=2;i<=n;i+=2) 
        {

                System.out.println("Even:"+i);


        }

sc.close();


odd number
--------------

        Scanner sc=new Scanner(System.in);
        System.out.println("Enter a number:");
        int n=sc.nextInt();

        for(int i=1;i<=n;i+=2)
        {

                System.out.println("odd:"+i);


        }

sc.close();


Nested loop
------------
One having another is called nexted...



syntax
------
for(initialization;condition;incr/decre)//Outer loop
{

//outer loop body
for(initialization;condition;incr/decre)//inner loop
{
//inner loop body

}


}


Example
--------
   for(int i=1;i<=3;i++)
        {
            for(int j=1;j<=3;j++)
            {
                System.out.println(i+" "+j);
            }
        }
        /*
        Outer loop
        -----------
        i=1 1<=3 true inside the loop
        j=1 1<=3 true inner loop body prints 1 1 j++
        j=2 2<=3  true prints 1 2 j++
        j=3 3<=3 true prints 1 3 j++
        j=4 4<=3 false Outer loop

        i++ i=2
        ---------
         i=2 2<=3 true inside the loop
        j=1 1<=3 true inner loop body prints 2 1 j++
        j=2 2<=3  true prints 2 2 j++
        j=3 3<=3 true prints 2 3 j++
        j=4 4<=3 false Outer loop

         i++ i=3
        ---------
         i=3 3<=3 true inside the loop
        j=1 1<=3 true inner loop body prints 3 1 j++
        j=2 2<=3  true prints 3 2 j++
        j=3 3<=3 true prints 3 3 j++
        j=4 4<=3 false Outer loop

         i++ i=4
        ---------
         i=4 4<=3 false loop  terminated





         */


output
-------
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3



    for(int i=1;i<=5;i++)
        {
            System.out.print("* ");
        }

* * * * *



  for(int i=1;i<=5;i++)
        {
            System.out.print(i+" ");
        }

1 2 3 4 5 




        for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }


* * * * * 
* * * * *
* * * * *
* * * * *
* * * * *



    for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                System.out.print(r+" ");
            }
            System.out.println();
        }


1 1 1 1 1 
2 2 2 2 2 
3 3 3 3 3 
4 4 4 4 4 
5 5 5 5 5 




   for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                System.out.print(c+" ");
            }
            System.out.println();
        }


1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 



       for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }




*
* *
* * *
* * * *
* * * * *



 for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print(r+" ");
            }
            System.out.println();
        }


1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 




        for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print(c+" ");
            }
            System.out.println();
        }



1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 



int k=1;
        for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print(k+" ");
                k++;
            }
            System.out.println();
        }


1
2 3
4 5 6
7 8 9 10
11 12 13 14 15




   for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                if(r==1 || r==5 || c==1 ||c==5)
                {
                    System.out.print("*  ");
                }
                else
                {
                    System.out.print("   ");
                }
            }
            System.out.println();
        }

Output
-------

* * * * *
*       *
*       *
*       *
* * * * *


Transfer Statements
--------------------
break 
continue

break
------
immediate termination

break;

Example
--------
  for(int i=1;i<=10;i++)
        {
            if(i==5)
            {
                break;
            }
            System.out.println(i);
        }


Output
-------
1
2
3
4



 for(int i=1;i<=10;i++)
        {
            if(i==5)
            {
                System.out.println(i);

                break;

            }


output
-------
5

continue
---------
Skips the current iteration and moves to the next iteration of the loop.

Example
--------
       for(int i=1;i<=10;i++)
        {
            if(i==5)
            {
                continue;

            }

            System.out.println(i);
        }

Output
-------
1
2
3
4
6
7
8
9
10

======================================================================================


Array
-----
An array is an indexed collection of fixed number of homogeneous data elements. 

The main advantage of arrays is we can represent multiple values with the same name 
so that readability of the code will be improved. 

But the main disadvantage of arrays is: 
-----------------------------------------
Fixed in size that is once we created an array there is no chance of increasing or 
decreasing the size based on our requirement that is to use arrays concept compulsory 
we should know the size in advance which may not possible always. 

We can resolve this problem by using collections.

Types of array
---------------
Single Dimensional Array
Multi Dimensional Array


Single Dimensional Array
------------------------

Array declarations:
--------------------
Single dimensional array declaration: 
Example:
int[] a;//recommended to use because name is clearly separated from the type 
int []a; 
int a[]; 

At the time of declaration we can’t specify the size otherwise we will get compile time error. 

Example:
int[] a;//valid 
int[5] a;//invalid



Single dimensional array declaration: 
-------------------------------------

Syntax for array declaration
------------------------------
datatype arrayname[]={elements};
or
datatype[] arrayname={elements};
or
datatype []arrayname={elements};


      String[] name={"Muthu","Ravi","Kumar"};//String array
      double[] salary={123.33,23.23,6565.66};//double array
      char[] ch={'A','B','C'};//char array

Example
-------
package com.mypack;

public class ArrayDemo {
    public static void main(String[] args) {
        //array declaration and initialization
        int[] studentMarks={8,9,10,6,7};
        //Array access using index always starts from 0
        System.out.println(studentMarks[0]);
        System.out.println(studentMarks[1]);
        System.out.println(studentMarks[2]);
        System.out.println(studentMarks[3]);
        System.out.println(studentMarks[4]);




    }
}



Memory allocation
-------------------
Syntax
------
datatype[] arrayname=new datatype[size];


int[] a={12,13,14};
int[] a=new int[5];





Arrays - Initialization
• Arrays are fixed size … don’t grow over time
• Specify the size/contents during initialization


Accessing Elements in an Array
• Arrays are zero-based. The first element is at position 0


 //array declaration and instantiation
        int[] studentMarks=new int[5];

        //initialization
        studentMarks[0]=8;
        studentMarks[1]=9;
        studentMarks[2]=10;
        studentMarks[3]=6;
        studentMarks[4]=7;

        //Array access using index always starts from 0
        System.out.println(studentMarks[0]);
        System.out.println(studentMarks[1]);
        System.out.println(studentMarks[2]);
        System.out.println(studentMarks[3]);
        System.out.println(studentMarks[4]);





Length of the array
--------------------
• To find the length, access the .length attribute

Example
-------
System.out.println(studentMarks.length);


Looping Through an Array - Version 1
--------------------------------------

for loop
----------

for (int i = 0; i < array.length; i++) {
    System.out.println(array[i]);
}

Looping Through an Array - Version 2
-------------------------------------
enhanced for loop
--------------------
Syntax
------
for (DataType variable : collection/array) {
    // Code block to execute
}

DataType: The type of elements in the array or collection.

variable: A temporary variable holding the current element.

collection: The array or collection to iterate over.

No need to manually index into the array …
Handled for you behind the scenes with the
enhanced for loop


When to Use?

When you only need to read elements.

When working with arrays, lists, or collections.

When you don't need an index or to modify elements inside the loop.



Example
---------

 Scanner sc=new Scanner(System.in);
        //array declaration and instantiation
        System.out.println("Enter memory size:");
        int size=sc.nextInt();
        int[] studentMarks=new int[size];

        //initialization
        System.out.println("Enter ur mark:");
//        int k=sc.nextInt();
        for(int i=0;i<studentMarks.length;i++)
        {
            studentMarks[i]=sc.nextInt();

        }
//        studentMarks[0]=8;
//        studentMarks[1]=9;
//        studentMarks[2]=10;
//        studentMarks[3]=6;
//        studentMarks[4]=7;

        //Array access using index always starts from 0
        System.out.println("Mark list.....");
        for(int i=0;i<studentMarks.length;i++)
        {
            System.out.println(studentMarks[i]);

        }
//        System.out.println(studentMarks[0]);
//        System.out.println(studentMarks[1]);
//        System.out.println(studentMarks[2]);
//        System.out.println(studentMarks[3]);
//        System.out.println(studentMarks[4]);
//
//        System.out.println(studentMarks.length);



Example 2
----------

       int[] arr={1,2,3,4,5};

        System.out.println("-----Using for loop-----------");
        for(int i=0;i<arr.length;i++)
        {
            System.out.println(arr[i]);
        }
        System.out.println("-----Using while loop-----------");
        int i=0;
        while(i<arr.length)
        {
            System.out.println(arr[i]);
            i++;
        }
        System.out.println("-----Enhanced for loop---------");
        for(int v:arr)
        {

            System.out.println(v);
        }

18-7-2025

Arrays in Java
----------------
Java provides the Arrays class to perform common array operations.

Package: java.util

Class: Arrays

Import Statement:
-----------------
import java.util.Arrays;

Arrays.toString(arr)
--------------------
Used to convert an array into a string representation.

Syntax:
-------
Arrays.toString(arr);

Example:

package com.mypack;

import java.util.Arrays;

public class ArrayDemo {
    public static void main(String[] args) {
        int[] arr = {1, 2, 4, 3, 5};
        System.out.println(arr);                 // Prints memory location
        System.out.println(Arrays.toString(arr)); // Prints array elements
    }
}
Output:

[I@7b23ec81
[1, 2, 4, 3, 5]


Sorting an Array (Ascending)
-----------------------------
Use Arrays.sort() to sort the array in ascending order.

Syntax:

Arrays.sort(arr);

Example:
---------
package com.mypack;

import java.util.Arrays;

public class ArrayDemo {
    public static void main(String[] args) {
        int[] arr = {1, 2, 4, 3, 5};
        Arrays.sort(arr);
        System.out.println(Arrays.toString(arr));
    }
}

Example using a for-each loop:
-------------------------------
int[] arr = {1, 2, 4, 3, 5};
Arrays.sort(arr); // Now arr = [1, 2, 3, 4, 5]
for (int v : arr) {
    System.out.println(v);
}

Output:
1
2
3
4
5


Swapping Two Numbers
----------------------
int a = 12;
int b = 10;

System.out.println("Before Swapping: " + a + " " + b);

int temp = a;
a = b;
b = temp;

System.out.println("After Swapping: " + a + " " + b);


Output:

Before Swapping: 12 10  
After Swapping: 10 12


Sorting Without Using Arrays.sort()
------------------------------------
Ascending Order:
----------------

int[] arr = {1, 2, 4, 3, 5};

for (int i = 0; i < arr.length; i++) {
    for (int j = i + 1; j < arr.length; j++) {
        if (arr[i] > arr[j]) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    System.out.println(arr[i]);
}

Descending Order:
-------------------
int[] arr = {1, 2, 4, 3, 5};

for (int i = 0; i < arr.length; i++) {
    for (int j = i + 1; j < arr.length; j++) {
        if (arr[i] < arr[j]) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    System.out.println(arr[i]);
}
Output:
---------
5
4
3
2
1

Finding Maximum Value
----------------------
int[] arr = {1, 2, 4, 3, 5};
int size = arr.length;

Arrays.sort(arr); // Sorted: [1, 2, 3, 4, 5]
System.out.println("Max: " + arr[size - 1]);


Finding Top 3 Maximum Values
-----------------------------
int[] arr = {1, 2, 4, 3, 5};
int size = arr.length;

Arrays.sort(arr); // [1, 2, 3, 4, 5]
System.out.println("1st Max: " + arr[size - 1]);
System.out.println("2nd Max: " + arr[size - 2]);
System.out.println("3rd Max: " + arr[size - 3]);


Without using sort:
--------------------

int[] arr = {1, 2, 4, 3, 5, 67, 12, 56};
int size = arr.length;

for (int i = 0; i < size; i++) {
    for (int j = i + 1; j < size; j++) {
        if (arr[i] > arr[j]) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}

System.out.println("1st Max: " + arr[size - 1]);
System.out.println("2nd Max: " + arr[size - 2]);
System.out.println("3rd Max: " + arr[size - 3]);


Arrays.fill()
-------------
Fills the array with a specified value.

Syntax:
--------

Arrays.fill(arr, value);

Examples:

int[] arr = new int[5];
Arrays.fill(arr, 6);
System.out.println(Arrays.toString(arr));

Output:

[6, 6, 6, 6, 6]


int[] arr = new int[5];
Arrays.fill(arr, 1, 4, 7);
System.out.println(Arrays.toString(arr));

Output:
[0, 7, 7, 7, 0]


Arrays.equals()
----------------
Compares two arrays. Returns true if both arrays have the same elements in the same order.

Syntax:
--------
Arrays.equals(arr1, arr2);

Example:
---------
int[] arr = {1, 2, 3};
int[] arr1 = {2, 3, 1};
boolean equals = Arrays.equals(arr, arr1);
System.out.println(equals);

Output:

false

Note: Order matters. Even if both arrays have the same elements, if the order is different, it returns false.

23-07-2025

Multidimensional Array
-----------------------

A 2D array (or matrix) is an array of arrays where each element is an array itself.

Used to represent tables, grids, or matrices in programming
Data is stored in row and column based index.(Matrix)

Syntax to Declare 2D Array in Java
-------------------------------------------------

dataType[][] arrayRefVar; (or)  
dataType [][]arrayRefVar; (or
)  
dataType arrayRefVar[][]; (or)  
dataType []arrayRefVar[];   

Example to instantiate Multidimensional Array in Java

int[][] arr=new int[row][col]; 


int[][] arr=new int[3][3];//3 row and 3 column  


   //datatype[][] arrayName={{},{},{}}
   //datatype[][] arrayName=new datatype[rows][columns];


Example to initialize Multidimensional Array in Java
-----------------------------------------------------
arr[0][0]=1;  
arr[0][1]=2;  
arr[0][2]=3;  
arr[1][0]=4;  
arr[1][1]=5;  
arr[1][2]=6;  
arr[2][0]=7;  
arr[2][1]=8;  
arr[2][2]=9;  

//declaring and initializing 2D array  
int arr[][]={{1,2,3},{2,4,5},{4,4,5}};  




Example
--------
      int[][] arr=new int[3][3];//Array Declaration and instantiation

        //Array initialization

//        arr[0][0]=1;
//        arr[0][1]=2;
//        arr[0][2]=3;
//
//        arr[1][0]=4;
//        arr[1][1]=5;
//        arr[1][2]=6;
//
//        arr[2][0]=7;
//        arr[2][1]=8;
//        arr[2][2]=9;


        int k=1;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j< arr.length;j++)
            {
                arr[i][j]=k;
                k++;
            }

        }

        //Access
//        System.out.println(arr[0][0]);
//        System.out.println(arr[0][1]);
//        System.out.println(arr[0][2]);
//
//        System.out.println(arr[1][0]);
//        System.out.println(arr[1][1]);
//        System.out.println(arr[1][2]);
//
//        System.out.println(arr[2][0]);
//        System.out.println(arr[2][1]);
//        System.out.println(arr[2][2]);

        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }





Using enhanced for loop
--------------------------
int[][] arr={{1,2,3},{4,5,6},{7,8,9}};

for(int[] r:arr)
{
    for(int v:r)
    {
        System.out.print(v+" ");
    }
    System.out.println();
}


Example
-------
int[][] arr = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        System.out.println(Arrays.deepToString(arr));

        System.out.println("Using for loop");
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                System.out.println(arr[i][j]);

            }
        }
        System.out.println("--------Enhanced for loop----------------");

        for (int[] v : arr) {
            for (int v1 : v) {
                System.out.println(v1);
            }


        }
    }


}




Jagged Arrays
--------------

A jagged array (also called an irregular array) is a special type of 2D array where the number of columns varies for each row. It is useful when dealing with scenarios where the number of elements in each row is different.


Declaration and Initialization
--------------------------------

int[][] jaggedArray = new int[3][];

// Assigning different column sizes for each row
jaggedArray[0] = new int[2];  // 2 columns
jaggedArray[1] = new int[4];  // 4 columns
jaggedArray[2] = new int[3];  // 3 columns


int[][] jaggedArray = {
    {1, 2},
    {3, 4, 5, 6},
    {7, 8, 9}
};

Memory Representation
-----------------------
Unlike 2D arrays, jagged arrays do not occupy equal memory for all rows. Each row has its own separate memory allocation.

jaggedArr[0] → [1, 2]  
jaggedArr[1] → [3, 4, 5, 6]  
jaggedArr[2] → [7, 8, 9]  

Iterating Over a Jagged Array
-------------------------------
for (int i = 0; i < jaggedArray.length; i++) {
    for (int j = 0; j < jaggedArray[i].length; j++) {
        System.out.print(jaggedArray[i][j] + " ");
    }
    System.out.println();
}

System.out.println("using for each");
        for(int[] row:jaggedArray)
        {
            for(int el:row)
            {
                System.out.println(el);
            }

        }



 //convert 2D array to String
 System.out.println(Arrays.deepToString(jaggedArray));

Advantages of Jagged Arrays
----------------------------
Memory Efficient: Saves memory since it allocates space only for the required number of columns.

Flexibility: Different rows can have different numbers of columns.

------------------------------------------------------------------



Jagged Array
-------------
If we are creating odd number of columns in a 2D array, it is known as a jagged array. In other words, it is an array of arrays with different number of columns.

------------
In java multidimensional arrays are implemented as array of arrays approach but not 
matrix form. 

The main advantage of this approach is to improve memory utilization. 

Example 1:2D
int[][] a=new int[2][]; 
a[0]=new int[3]; 
a[1]=new int[2]; 



Example:
package com.test;



public class ArrayDemo {

	public static void main(String[] args) {
		
		int a[][]=new int[2][];
		a[0]=new int[3];
		a[1]=new int[4];
		
		for(int i=0;i<a.length;i++)
		{
			for(int j=0;j<a[i].length;j++)
			{
				a[i][j]=1;
			}
			
		}
		
		for(int i=0;i<a.length;i++)
		{
			for(int j=0;j<a[i].length;j++)
			{
				System.out.print(a[i][j]);
			}
			System.out.println(" ");
		}

	}

}





Example :
System.out.println(a);//[[I@3e25a5 
System.out.println(a[0]);//[I@19821f 
System.out.println(a[0][0]);//0


Note: Whenever we are trying to print any object reference internally toString() method will be 
executed which is implemented by default to return the following. 
classname@hexadecimalstringrepresentationofhashcode.


length:
1) It is the final variable applicable only for arrays. 
2) It represents the size of the array. 
19 
Example:
int[] x=new int[3]; 
System.out.println(x.length());//C.E: cannot find symbol 
System.out.println(x.length);//3

=================================================================================================================




String
-------
Sequence of characters..
String immutable..(cannot be changed)
String class ---->compare() ,equals(),length(),concat(),CompareTo()....
java.lang.String--->java.lang(package name).String(class name)

How to create String object
----------------------------
By string literal
By new keyword

1)String literal----constant

String s="welcome";

Immutable
-----------
package com.mypack1;

public class StringDemo {
    public static void main(String[] args) {
        //using literals
        String name="Muthu";
        name= name.concat("Kumar");
        System.out.println(name);

    }
}


new keyword
------------
String s=new String("welcome");

package practice;

public class StringDemo {

	public static void main(String[] args) {
		String s1=new String("Welcome");

		System.out.print(ch);

	}

}

+ Concat(join)
-----------
        String str1="Hii";
        String str2="Hii";
        
        int a=12;
        int b=2;
        System.out.println(a+b);

        System.out.println(str1+str2+a+b);//HiiHii122
        System.out.println(a+b+str1+str2);//14HiiHii
 

String Methods
---------------

length vs length()

1. length() – Get String Length
---------------------------------
Syntax:

int length = str.length();

Usage: Returns the total number of characters in the string.

Example:

String str = "Hello World";
System.out.println(str.length());  // Output: 11

2. charAt(index) – Get Character at a Specific Position
-------------------------------------------------------

Syntax:
--------
char ch = str.charAt(index);
Usage: Returns the character at the given index (0-based).

Example:

String str = "Java";
System.out.println(str.charAt(1));  // Output: 'a'


3. toUpperCase() – Convert to Uppercase
----------------------------------------

Syntax:
String upperStr = str.toUpperCase();
Example:

String str = "hello";
System.out.println(str.toUpperCase());  // Output: "HELLO"

4. toLowerCase() – Convert to Lowercase
-----------------------------------------
Syntax:
String lowerStr = str.toLowerCase();

Example:
String str = "HELLO";
System.out.println(str.toLowerCase());  // Output: "hello"

5. trim() – Remove Leading & Trailing Spaces
----------------------------------------------
Syntax:
String trimmedStr = str.trim();

Example:

String str = "  Java  ";
System.out.println(str.trim());  // Output: "Java"

6. substring(beginIndex) – Extract Substring
----------------------------------------------
Syntax:
String subStr = str.substring(startIndex);
Example:

String str = "Programming";
System.out.println(str.substring(3));  // Output: "gramming"

7. substring(beginIndex, endIndex) – Extract Specific Substring
---------------------------------------------------------------
Syntax:
String subStr = str.substring(startIndex, endIndex);
Example:

String str = "JavaProgramming";
System.out.println(str.substring(4, 11));  // Output: "Program"




8. equals() – Compare Strings (Case-Sensitive)
------------------------------------------------
Syntax:
boolean isEqual = str1.equals(str2);

Example:

String s1 = "Java";
String s2 = "Java";
System.out.println(s1.equals(s2));  // Output: true


Ex2
----

       String s1="Java";
        String s2="java";

        boolean eq=s1.equals(s2);

        System.out.println(eq);//false
        System.out.println(s1==s2);//false



Ex3
----
       String s1="Java";
        String s2="Java";
        String s3=new String("Java");
        boolean eq=s1.equals(s3);

        System.out.println(eq);//true
        System.out.println(s1==s3);//false

9. compareTo() – Lexicographical Comparison
------------------------------------------

s1==s2:0
s1>s2:positive value
s1<s2:negative value

Syntax:
int result = str1.compareTo(str2);
Example:

String s1 = "Apple";
String s2 = "Banana";
System.out.println(s1.compareTo(s2));  // Output: -1

10. contains() – Check If Substring Exists
-------------------------------------------
Syntax:
-------
boolean result = str.contains("text");

Example:
String str = "Java Programming";
System.out.println(str.contains("Java"));  // Output: true

12. startsWith() – Check Prefix
---------------------------------
Syntax:
boolean result = str.startsWith("prefix");

Example:
String str = "Hello.java";
System.out.println(str.startsWith("Hello"));  // Output: true

13. endsWith() – Check Suffix
-------------------------------
Syntax:
boolean result = str.endsWith("suffix");
Example:

String str = "MyFile.java";
System.out.println(str.endsWith(".java"));  // Output: true

Example
--------

   String url="https://www.amazon.in/";
        if(url.endsWith("in/"))
        {
            System.out.println("Valid url");
        }
        else
        {
            System.out.println("Invalid url");
        }

String[] products={"Mobile","Laptop","Watch"};


14. indexOf() – Get First Occurrence Index
--------------------------------------------
Syntax:

int index = str.indexOf("text");
Example:

String str = "Java Programming";
System.out.println(str.indexOf("a"));  // Output: 1

15. replace() – Replace Characters
------------------------------------
Syntax:
String newStr = str.replace('oldChar', 'newChar');
Example:

String str = "Java is fun";
System.out.println(str.replace('a', 'o'));  // Output: "Jovo is fun"

16. split() – Split String into Array
--------------------------------------


Syntax:
String[] parts = str.split("delimiter");

Example:

String str = "Apple,Orange,Banana";
String[] fruits = str.split(",");

for (String fruit : fruits) {
    System.out.println(fruit);
}
/* Output:
Apple
Orange
Banana
*/

17. join() – Join Strings with a Delimiter
------------------------------------------
Syntax:

String result = String.join("delimiter", str1, str2, ...);
Example:


String result = String.join("-", "Java", "Python", "C++");
System.out.println(result);  // Output: "Java-Python-C++"



hashcode()
-----------

For every object jvm will generate a unique number which is nothing but hashCode. 
hashCode of an object will be used by jvm while saving objects into HashSet, HashMap, 
and Hashtable etc. 
 If the objects are stored according to hashCode searching will become very efficient 
(The most powerful search algorithm is hashing which will work based on hashCode). 

If we didn’t override hashCode() method then Object class hashCode() method will be 
executed which generates hashCode based on address of the object but it

Example:
--------
          String s1="string1";
	  String s2="string1";
	  
		 
	 System.out.println(s1.hashCode());//-1881759168
	 System.out.println(s2.hashCode());//-1881759168





Example
--------
package com.mypack1;

public class StringDemo {
    public static void main(String[] args) {
//        //using literals
//        String name="Muthu";
//        name= name.concat("Kumar");
//        System.out.println(name);
        //new keyword
//        String str=new String("Welcome");
//        System.out.println(str);

//        String str1="Hii";
//        String str2="Hii";
//        String str3=new String("Hii");//2 different objects
//
//
//        System.out.println(str1==str2);//true
//        System.out.println(str1==str3);//false
//
//        boolean equals = str1.equals(str3);
//        System.out.println(equals);
//
//        int a=12;
//        int b=2;
//        System.out.println(a+b);
//
//        System.out.println(str1+str2+a+b);
//        System.out.println(a+b+str1+str2);


//        String s="Java is a programming language";
//        int length = s.length();
//
//        System.out.println("Length:"+" "+length);
//        char c = s.charAt(1);
//        System.out.println(c);
//        String upperCase = s.toUpperCase();
//
//        System.out.println(upperCase);
//        System.out.println(s.toLowerCase());
//        System.out.println("Before Trim:"+" "+s.length());
//        String trim = s.trim();
//        System.out.println("After Trim:"+" "+trim.length());
//
//        System.out.println("\u0B85");
//        System.out.println(s.substring(10,22));
//
//        String s1 = "Apple";
//        String s2 = "Aplle";
//        System.out.println(s1.compareTo(s2));//A 65<67 112>108
//
//        String product="mobile";
//        String search="watch";
//        if(product.contains(search))
//        {
//            System.out.println("Found");
//        }
//        else
//        {
//            System.out.println("Not found");
//        }
//        System.out.println(s.contains("Java"));
//        System.out.println(s.startsWith("java"));
//        System.out.println(s.endsWith("language"));
//
//        String url="https://www.amazon.in/";
//        if(url.endsWith("in/"))
//        {
//            System.out.println("Valid url");
//        }
//        else
//        {
//            System.out.println("Invalid url");
//        }

//        String s="Java-is-very-difficult ";
//        int j = s.indexOf("Java",5,9);
//        System.out.println(j);
//        String replace = s.replace("difficult", "easy");
//        System.out.println(replace);
//
//        String[] s1 = s.split("-");//{"Java","is","very","difficult"}
//        System.out.println(s1);
//        for(String s2:s1)
//        {
//            System.out.println(s2);
//        }
//
//        String result = String.join("-", "Java", "Python", "C++");
//
//        System.out.println(result);

        String s1="Hii";
//        String s2="Hii";
//        System.out.println(s1==s2);
//        int i = s1.hashCode();
//        int j=s2.hashCode();
//        System.out.println(i);
//        System.out.println(j);
//
//        char[] charArray = s1.toCharArray();
//        System.out.println(charArray[0]);

        String r="";
        for(int i=s1.length()-1;i>=0;i--)
        {
          r += s1.charAt(i);//r=r+s1.charAt(i); r=""+i r=i+i
        }
        System.out.println( r);


    }
}




StringBuffer----Mutable
------------------------
If the content will change frequently then never recommended to go for String object because for every change a new object will be created internally.

To handle this type of requirement we should go for StringBuffer concept.

The main advantage of StringBuffer over String is, all required changes will be performed in the existing object only instead of creating new object.

Constructors:
-------------
1) StringBuffer sb=new StringBuffer();
Creates an empty StringBuffer object with default initialcapacity “16”.
Once StringBuffer object reaches its maximum capacity a new StringBuffer object will be created with 

Newcapacity=(currentcapacity+1)*2.


Important methods of StringBuffer:
----------------------------------
1) length();
Return the no of characters present in the StringBuffer.

2) capacity();
 Returns current buffer capacity (memory)

3) charAt(int index);
It returns the character located at specified index.

4) setCharAt(int index,char ch);
To replace the character locating at specified index with the provided character.

5) append(String s);   Adds content to the end of the buffer

6) insert(int index,String s);   Inserts text at a specific index 

7) delete(int begin,int end);
 To delete characters from begin index to end n-1 index.

8) deleteCharAt(int index);
 To delete the character locating at specified index.

9) reverse(); Reverses the string

10) setLength(int length);
Consider only specified no of characters and remove all the remaining characters.

11) trimToSize();
To deallocate the extra free memory such that capacity and size are equal.

12) ensureCapacity(int initialcapacity);
To increase the capacity dynamically based on our requirement.


replace()
Replaces characters between two indexes
sb.replace(int start, int end, String str);

toString()
Converts StringBuffer to String

Example
-------
package com.mypack1;

public class StringBufferDemo {
    public static void main(String[] args) {
        StringBuffer sb=new StringBuffer();
        sb.ensureCapacity(100);
        int capacity = sb.capacity();
        System.out.println(capacity);
        sb.append("ABCDEFGHIJKLMNOPQ");
//        sb.append("Q");
        System.out.println(sb.capacity());
        System.out.println(sb.length());
        sb.insert(1,"hii");
        System.out.println(sb);
        System.out.println(sb.charAt(1));
        sb.setCharAt(1,'H');
        System.out.println(sb);
        sb.delete(1,4);
        System.out.println(sb);
        sb.deleteCharAt(1);
        System.out.println(sb);

        sb.reverse();
        System.out.println(sb);

        String name="Oranium";
        StringBuffer sb1=new StringBuffer(name);
        sb1.reverse();
        System.out.println(sb1);



    }
}





StringBuilder (1.5)
-----------------------
Every method present in StringBuffer is declared as synchronized hence at a time only one thread is allowed to operate on the StringBuffer object due to this, waiting time of the threads will be increased and effects performance of the system.
To overcome this problem sun people introduced StringBuilder concept in 1.5v.

String vs StringBuffer vs StringBuilder
----------------------------------------
If the content is fixed and won’t change frequently then we should go for String.
If the content will change frequently but Thread safety is required then we should go for StringBuffer.
If the content will change frequently and Thread safety is not required then we should go for StringBuilder.

Important methods of StringBuilder:
-----------------------------------
1)StringBuilder append() method
The StringBuilder append() method concatenates the given argument with this string.

2)StringBuilder insert() 
The StringBuilder insert() method inserts the given string with this string at the given position.

3)StringBuilder replace() 
The StringBuilder replace() method replaces the given string from the specified beginIndex and endIndex.

4)StringBuilder delete() 
The delete() method of StringBuilder class deletes the string from the specified beginIndex to endIndex.

5)StringBuilder reverse() 
The reverse() method of StringBuilder class reverses the current string.

6)StringBuilder capacity() 
 The capacity() method of StringBuilder class returns the current capacity of the Builder. The default capacity of the Builder is 16.



Example
----------
public class StringBufferDemo {
    public static void main(String[] args) {
        StringBuilder sb=new StringBuilder();
        sb.ensureCapacity(100);
        int capacity = sb.capacity();
        System.out.println(capacity);
        sb.append("ABCDEFGHIJKLMNOPQ");
//        sb.append("Q");
        System.out.println(sb.capacity());
        System.out.println(sb.length());
        sb.insert(1,"hii");
        System.out.println(sb);
        System.out.println(sb.charAt(1));
        sb.setCharAt(1,'H');
        System.out.println(sb);
        sb.delete(1,4);
        System.out.println(sb);
        sb.deleteCharAt(1);
        System.out.println(sb);

        sb.reverse();
        System.out.println(sb);

        String name="Oranium";
        StringBuffer sb1=new StringBuffer(name);
        sb1.reverse();
        System.out.println(sb1); 

}
}



 long start1 = System.currentTimeMillis();
                String s = "Hello";
                for (int i = 0; i < 10000; i++) {
                    s = s + " World";
                }
                long end1 = System.currentTimeMillis();
                System.out.println("String Time: " + (end1 - start1) + " ms");

                // Test with StringBuffer
                long start2 = System.currentTimeMillis();
                StringBuffer sb = new StringBuffer("Hello");
                for (int i = 0; i < 10000; i++) {
                    sb.append(" World");
                }
                long end2 = System.currentTimeMillis();
                System.out.println("StringBuffer Time: " + (end2 - start2) + " ms");


//////////////////
Java Methods

What is a Method
------------------
A method is a block of code used to perform a specific task. 
It helps in code reusability, improves readability, and makes the program easier to maintain.

Method Signature
----------------
A method signature includes the method name and the parameter list.


Syntax
---------

access_modifier return_type methodName(parameters) 
{
    // code to execute
}

Components of a Method
---------------------------
Access Modifier - Controls visibility

public: accessible everywhere

private: accessible only within the class

protected: accessible within the package or subclass

default (no modifier): accessible within the package

Return Type - The type of value the method returns (int, String, void, etc.)

Method Name - Should describe what the method does (example: addNumbers)

Parameters - Inputs to the method (can be zero or more)

Method Body - The set of statements to be executed inside the curly braces


Return Type
------------
   public  static int m1()
    {
//        System.out.println("M1 Method");
        return 1;
    }


 public  static float m1()
    {
//        System.out.println("M1 Method");
        return 11.11f;
    }


  public  static String m1()
    {
//        System.out.println("M1 Method");
        return "Hello";
    }


void--> does not return anything


Types of Methods in Java
--------------------------
Predefined methods - Examples: length(), println(), charAt() etc....
User-defined methods - Created by the programmer based on requirements

Types of Methods in User-Defined Methods
-----------------------------------------

Method with no parameters and no return type

Method with parameters and no return type

Method with no parameters and with return type

Method with parameters and return type


Method with no parameters and no return type
----------------------------------------------

   public static void m1()
    {
        System.out.println("m1 method");
    }


Method with parameters and no return type
------------------------------------------
  public static void m1(int a, int b)
    {
        System.out.println(a+b);
    }

Method with no parameters and with return type
-----------------------------------------------
    public static int m1()
    {
return 0;    
}


Method with parameters and return type
----------------------------------------
    public static int m1(int a ,int b)
    {
      return a+b;
    }


factorial program
-------------------
5*4*3*2*1---->120;

String reverse
----------------

String s="Hello";





