
    Java

it is an open source

extension .jar || .java

precent version java24

it is platform independent

java recent version is 24



java structure 

--------------

class main{

public static void main(String args []){

System.out.print("hi");

}

}

java  ->(JDK,JRE,JVM)

JDK-JDK is used to write and compile code .it contain with(JER,JVM)

JRE-JER is used to run a java application on a system . it contain with (libraries, JVM)

JVM-JVM is used to convert a byte code to system code .

------------
java data type

java data type is used to predefined the type and size of value

data type
 
->primitive data type(fixed size)-> byte(1),short(2),int(4),long(8),float(4),double(8),char(2),Boolean(1).

->nonprimitive type(not a fixed size)->array,classea.

Data Type	Memory Size		Description
-------------------------------------------------------------------------------
byte		1 byte		Stores whole numbers from -128 to 127
short		2 bytes		Stores whole numbers from -32,768 to 32,767
int		4 bytes		Stores whole numbers from -2,147,483,648 to 2,147,483,647
long		8 bytes		Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807


float		4 bytes		Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
double		8 bytes		Stores fractional numbers. Sufficient for storing 15 decimal digits

boolean		1 bit		Stores true or false values
char		2 bytes		Stores a single character/letter or ASCII values

-----------
java variable 

variable is need to unique 

it should not contain with space 

it storage to value 

eg: int a=10;
        |->variable

----------

type casting 

type casting is used to convert one primitive type to another primitive type

two type 

widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double


Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte

Automatic type casting
------------------------
Ex1
----
int mynumber=12;
double doubleNumber=mynumber;

System.out.println(doubleNumber);

Ex2
----
        char ch='Z';
        int result=ch;//90

        System.out.println(result);



manually  or Narrowing type casting
------------------------------------

Ex1:
----
  int number=65;
  char ch=(char)number;

  System.out.println(ch);

Ex2:
-----
       double d=3.456;
        int r=(int)d;
        System.out.println(r);


Operators
----------
It is a Symbol used to perform Operations..

Types of Operators
----------------------
Arithmetic Operators
Relational or Comparison Operators
Logical Operators
Assignment Operators
Bitwise Operators
Ternary Operator


Arithmetic Operators
----------------------
+
-
*
/
%

Example
--------
package com.mypack;

public class OperatorDemo {
    public static void main(String[] args) {
        int n1=12;
        int n2=2;
        int add=n1+n2;
        System.out.println(add);
        System.out.println(n1-n2);

        System.out.println(n1*n2);
        System.out.println(n1/n2);
        System.out.println(n1%n2);
    }
}


Increment operator
-----------------
Post Increment
----------------
VariableName++;

n1++;//12 13
        System.out.println(n1);

  //n1++;//12 13
        System.out.println(n1++);//12 13
        System.out.println(n1);//13

Pre Increment
--------------
++VariableName;


 ++n2;//3 3
        System.out.println(n2);//3



Example
----------
package com.mypack;

public class OperatorDemo {
    public static void main(String[] args) {
        int n1=12;
        int n2=2;
        int add=n1+n2;
        System.out.println(add);
        System.out.println(n1-n2);

        System.out.println(n1*n2);
        System.out.println(n1/n2);
        System.out.println(n1%n2);
        System.out.println("--------------------------------");
        //n1++;//12 13
        System.out.println(n1++);//12 13
        System.out.println(n1);//13



        System.out.println(++n2);//3 3
        System.out.println(n2);//3
        System.out.println(n2++);//3 4
        System.out.println(n2);//4
    }
}



Scanner Class
--------------
Used to get input from the user...


java.util Package Name
Scanner class Name


Example
-------
package com.mypack;

import java.util.Scanner;

public class ScannerDemo {



    public static void main(String[] args) {

        //Object Create  className objectName=new ClassName();
        Scanner sc=new Scanner(System.in);
//        System.out.println("Enter a number:");
//        int n=sc.nextInt();
//
//        System.out.println("Enter ur salary:");
//        float salary=sc.nextFloat();

//        System.out.println("Enter ur name:");
//        String name=sc.nextLine();


//        System.out.println(n);
//        System.out.println("Salary is:"+salary);
//        System.out.println("Name is:"+name);

        System.out.println("Enter ur double value:");
        double d=sc.nextDouble();
        System.out.println(d);

    }
}


Example 2
-----------
        import java.util.Scanner;
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur age:");
        int age=sc.nextInt();

        String voteEligible= age>=18 ? "Eligible":"Not Eligible";
        System.out.println(voteEligible);











-------------------------
Flow control
-------------
Flow control describe the order in which the statements will be executed at runtime.

Selection statements or conditional or decision statement
----------------------------------------------------------
Java If-else Statement
The java  if statement is used to test the condition. 
It checks boolean condition: true or false.

There are various types of if statement in Java.
--------------------------------------------------
if statement
if-else statement
if-else-if ladder
nested if statement
Switch statement

if statement
-------------
The Java if statement tests the condition. It executes the if block if condition is true.

Syntax
-------
if(condition)
{
//code to be executed if the condition true
}

Example
--------
package com.mypack;

import java.util.Scanner;

public class ConditionalDemo {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur age:");

        int age=sc.nextInt();

        if(age>=18)
        {
            System.out.println("Eligible");
        }
     

    }
}



if-else statement
------------------
The Java if-else statement also tests the condition. It executes the if block if condition is true otherwise else block is executed.

Syntax
-------
if(condition)
{
//code to be executed if the condition true

}
else
{
//code to be executed if the condition false

}

Example
-------
package com.mypack;

import java.util.Scanner;

public class ConditionalDemo {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur age:");

        int age=sc.nextInt();

        if(age>=18)
        {
            System.out.println("Eligible");
        }
        else
        {
            System.out.println("Not Eligible");
        }

    }
}



if-else-if ladder
------------------
The if-else-if ladder statement executes one condition from multiple statements.

Syntax:
-------
if(condition1)
{  
//code to be executed if condition1 is true  
}
else if(condition2)
{  
//code to be executed if condition2 is true  
}  
else if(condition3)
{  
//code to be executed if condition3 is true  
}  
else
{  
//code to be executed if all the conditions are false  
} 


Example
--------
package com.mypack;

import java.util.Scanner;

public class ConditionalDemo {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter ur mark:");

        int mark=sc.nextInt();
//        90-100--->A grade
//        80-90--->B grade

        if(mark>=90 && mark<=100)
        {
            System.out.println("A grade");
        }
        else if(mark>=80 && mark<90)
        {
            System.out.println("B grade");
        }
        else
        {
            System.out.println("U grade");
        }

    }
}




nested if statement
--------------------
The nested if statement represents the if block within another if block. Here, the inner if block condition executes only when outer if block condition is true.

Syntax:
---------
if(condition)//outer if
{    
     //code to be executed    
if(condition)
{  
             //code to be executed    
    }   
else
{

} 
}  
else
{


}

Example
--------
 System.out.println("Enter ur age and Weight:");
        int age=sc.nextInt();
        int weight=sc.nextInt();
        if(age>=18)
        {
            if(weight>=60)
            {
                System.out.println("Eligible to donate a blood");
            }
            else {
                System.out.println("NotEligible due to insufficient Weight");

            }
        }
        else
        {
            System.out.println("NotEligible due to insufficient Age");

        }




Switch statement
------------------

If several options are available then it is not recommended to use if-else we should go 
for switch statement.

The Java switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement. 

Until 1.4 version the allow types for the switch argument are byte, short, char, int but 
from 1.5 version on wards the corresponding wrapper classes (Byte, Short, Character, 
Integer) and “enum” types are allowed.


Syntax
-------
switch(expression)
{    
case value1:    
 //code to be executed;    
 break;  

case value2:    
 //code to be executed;    
 break;  
......    
    
default:     
 code to be executed if all cases are not matched;    
}  


Curly braces are mandatory. 
Both case and default are optional. 
Every statement inside switch must be under some case (or) default. Independent 


Example
--------
package com.mypack;

public class SwitchDemo {
    public static void main(String[] args) {

        int day=1;
      switch (day)
      {
          case 1:
              System.out.println("Sun");
              break;
          case 2:
              System.out.println("Mon");
              break;
          case 3:
              System.out.println("Tue");
              break;
          case 4:
              System.out.println("Wed");
              break;
          case 5:
              System.out.println("Thu");
              break;
          case 6:
              System.out.println("Fri");
              break;
          case 7:
              System.out.println("Sat");
              break;
          default:
              System.out.println("Invalid day");
      }

    }
}


Using String
-------------
package com.mypack;

public class SwitchDemo {
    public static void main(String[] args) {


        String fruit="Apple";
      switch (fruit)
      {
          case "Apple":
              System.out.println("Apple");
              break;
          case "Banana":
              System.out.println("Banana");
              break;
          case "Orange":
              System.out.println("Orange");
              break;
          default:
              System.out.println("Invalid");
      }

    }
}


char
-----
package com.mypack;

public class SwitchDemo {
    public static void main(String[] args) {

        char ch='Z';
      switch (ch)
      {
          case 'A':

          case 'E':
          case 'I':

          case 'O':

          case 'U':
              System.out.println("vow");
              break;
          default:
              System.out.println("Consonant");
      }

    }
}


Selector type of 'double' is not supported...







Loop or Iterative Statement
----------------------------
while
do-while
for loop

target-->50  stop (condition) 1<=50
starts--->1  initialization
Count---->||||||||||||||||| (increment/decrement)




while loop
----------
if we don’t know the no of iterations in advance then best loop is while loop.

Syntax
------
while(condition)
{
//code to be executed

}


Example
-------
package com.mypack;

public class LoopDemo {
    public static void main(String[] args) {
//        System.out.println("Hii");
        int start=1;
        while(start<=10)
        {
            System.out.println("Hii");
            start++;
        }
        System.out.println("Outside of the loop");

    }
}


package com.mypack;

public class LoopDemo {
    public static void main(String[] args) {
//        System.out.println("Hii");
        int start=1;
        while(start<=5)
        {
            System.out.println(start);
            start++;
        }
        System.out.println("Outside of the loop");
        /*
        start=1
        1<=5 true 
        
        inside the loop body prints 1
        start++ 2
        2<=5 true inside the loop prints 2
        3<=5 true inside the loop prints 3
         4<=5 true inside the loop prints 4
        5<=5 true inside the loop prints 5
        6<=5 false loop stop
        
         */

    }
}


infinite loop
-------------
while(true)
{

}

        int start=1;
        while(start<=5)
        {
            System.out.println(start);
        }
        System.out.println("Outside of the loop");



5
4
3
2
1

int start=5;
while(start>=1)
{
sout(start);

start--;

}






Do-while
---------
If we want to execute loop body at least once then we should go for do-while. 

Syntax
------
do
{


}while(condition);


Example
===-===
   int i=1;

        do{
            System.out.println(i);
            i++;
        }while(i<=10);




int i=1;

        do{
            i++;
            System.out.println(i);

        }while(i<=10);



      int i=10;

        do{
            System.out.println(i);
            i--;

        }while(i>=1);

For Loop
--------
This is the most commonly used loop and best suitable if we know the no of iterations in 
advance.

syntax
------
for(initialization;condition;incr/decre)
{



}

Example
--------
for(int i=1;i<=10;i++)
        {
            System.out.println(i);
        }

int i=1;
        for(System.out.println("Hii");i<=3;i++)
        {
            System.out.println(i);
        }

output
------
Hii
1
2
3




int i=1;
        for(System.out.println("Hii");i<=3;System.out.println("Hello"))
        {
            System.out.println(i);
            i++;
        }


Output
--------
Hii
1
Hello
2
Hello
3
Hello


Infinite loop
--------------
  for(;;)
        {
            System.out.println("Hii");
        }




Example even number 
-----------
      Scanner sc=new Scanner(System.in);
        System.out.println("Enter a number:");
        int n=sc.nextInt();

        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                System.out.println("Even:"+i);

            }
        }

sc.close();


or


      Scanner sc=new Scanner(System.in);
        System.out.println("Enter a number:");
        int n=sc.nextInt();

        for(int i=2;i<=n;i+=2) 
        {

                System.out.println("Even:"+i);


        }

sc.close();


odd number
--------------

        Scanner sc=new Scanner(System.in);
        System.out.println("Enter a number:");
        int n=sc.nextInt();

        for(int i=1;i<=n;i+=2)
        {

                System.out.println("odd:"+i);


        }

sc.close();


Nested loop
------------
One having another is called nexted...



syntax
------
for(initialization;condition;incr/decre)//Outer loop
{

//outer loop body
for(initialization;condition;incr/decre)//inner loop
{
//inner loop body

}


}


Example
--------
   for(int i=1;i<=3;i++)
        {
            for(int j=1;j<=3;j++)
            {
                System.out.println(i+" "+j);
            }
        }
        /*
        Outer loop
        -----------
        i=1 1<=3 true inside the loop
        j=1 1<=3 true inner loop body prints 1 1 j++
        j=2 2<=3  true prints 1 2 j++
        j=3 3<=3 true prints 1 3 j++
        j=4 4<=3 false Outer loop

        i++ i=2
        ---------
         i=2 2<=3 true inside the loop
        j=1 1<=3 true inner loop body prints 2 1 j++
        j=2 2<=3  true prints 2 2 j++
        j=3 3<=3 true prints 2 3 j++
        j=4 4<=3 false Outer loop

         i++ i=3
        ---------
         i=3 3<=3 true inside the loop
        j=1 1<=3 true inner loop body prints 3 1 j++
        j=2 2<=3  true prints 3 2 j++
        j=3 3<=3 true prints 3 3 j++
        j=4 4<=3 false Outer loop

         i++ i=4
        ---------
         i=4 4<=3 false loop  terminated





         */


output
-------
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3



    for(int i=1;i<=5;i++)
        {
            System.out.print("* ");
        }

* * * * *



  for(int i=1;i<=5;i++)
        {
            System.out.print(i+" ");
        }

1 2 3 4 5 




        for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }


* * * * * 
* * * * *
* * * * *
* * * * *
* * * * *



    for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                System.out.print(r+" ");
            }
            System.out.println();
        }


1 1 1 1 1 
2 2 2 2 2 
3 3 3 3 3 
4 4 4 4 4 
5 5 5 5 5 




   for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                System.out.print(c+" ");
            }
            System.out.println();
        }


1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 
1 2 3 4 5 



       for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }




*
* *
* * *
* * * *
* * * * *



 for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print(r+" ");
            }
            System.out.println();
        }


1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 




        for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print(c+" ");
            }
            System.out.println();
        }



1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 



int k=1;
        for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=r;c++)
            {
                System.out.print(k+" ");
                k++;
            }
            System.out.println();
        }


1
2 3
4 5 6
7 8 9 10
11 12 13 14 15




   for(int r=1;r<=5;r++)
        {
            for(int c=1;c<=5;c++)
            {
                if(r==1 || r==5 || c==1 ||c==5)
                {
                    System.out.print("*  ");
                }
                else
                {
                    System.out.print("   ");
                }
            }
            System.out.println();
        }

Output
-------

* * * * *
*       *
*       *
*       *
* * * * *


Transfer Statements
--------------------
break 
continue

break
------
immediate termination

break;

Example
--------
  for(int i=1;i<=10;i++)
        {
            if(i==5)
            {
                break;
            }
            System.out.println(i);
        }


Output
-------
1
2
3
4



 for(int i=1;i<=10;i++)
        {
            if(i==5)
            {
                System.out.println(i);

                break;

            }


output
-------
5

continue
---------
Skips the current iteration and moves to the next iteration of the loop.

Example
--------
       for(int i=1;i<=10;i++)
        {
            if(i==5)
            {
                continue;

            }

            System.out.println(i);
        }

Output
-------
1
2
3
4
6
7
8
9
10

======================================================================================


Array
-----
An array is an indexed collection of fixed number of homogeneous data elements. 

The main advantage of arrays is we can represent multiple values with the same name 
so that readability of the code will be improved. 

But the main disadvantage of arrays is: 
-----------------------------------------
Fixed in size that is once we created an array there is no chance of increasing or 
decreasing the size based on our requirement that is to use arrays concept compulsory 
we should know the size in advance which may not possible always. 

We can resolve this problem by using collections.

Types of array
---------------
Single Dimensional Array
Multi Dimensional Array


Single Dimensional Array
------------------------

Array declarations:
--------------------
Single dimensional array declaration: 
Example:
int[] a;//recommended to use because name is clearly separated from the type 
int []a; 
int a[]; 

At the time of declaration we can’t specify the size otherwise we will get compile time error. 

Example:
int[] a;//valid 
int[5] a;//invalid



Single dimensional array declaration: 
-------------------------------------

Syntax for array declaration
------------------------------
datatype arrayname[]={elements};
or
datatype[] arrayname={elements};
or
datatype []arrayname={elements};


      String[] name={"Muthu","Ravi","Kumar"};//String array
      double[] salary={123.33,23.23,6565.66};//double array
      char[] ch={'A','B','C'};//char array

Example
-------
package com.mypack;

public class ArrayDemo {
    public static void main(String[] args) {
        //array declaration and initialization
        int[] studentMarks={8,9,10,6,7};
        //Array access using index always starts from 0
        System.out.println(studentMarks[0]);
        System.out.println(studentMarks[1]);
        System.out.println(studentMarks[2]);
        System.out.println(studentMarks[3]);
        System.out.println(studentMarks[4]);




    }
}



Memory allocation
-------------------
Syntax
------
datatype[] arrayname=new datatype[size];


int[] a={12,13,14};
int[] a=new int[5];





Arrays - Initialization
• Arrays are fixed size … don’t grow over time
• Specify the size/contents during initialization


Accessing Elements in an Array
• Arrays are zero-based. The first element is at position 0


 //array declaration and instantiation
        int[] studentMarks=new int[5];

        //initialization
        studentMarks[0]=8;
        studentMarks[1]=9;
        studentMarks[2]=10;
        studentMarks[3]=6;
        studentMarks[4]=7;

        //Array access using index always starts from 0
        System.out.println(studentMarks[0]);
        System.out.println(studentMarks[1]);
        System.out.println(studentMarks[2]);
        System.out.println(studentMarks[3]);
        System.out.println(studentMarks[4]);





Length of the array
--------------------
• To find the length, access the .length attribute

Example
-------
System.out.println(studentMarks.length);


Looping Through an Array - Version 1
--------------------------------------

for loop
----------

for (int i = 0; i < array.length; i++) {
    System.out.println(array[i]);
}

Looping Through an Array - Version 2
-------------------------------------
enhanced for loop
--------------------
Syntax
------
for (DataType variable : collection/array) {
    // Code block to execute
}

DataType: The type of elements in the array or collection.

variable: A temporary variable holding the current element.

collection: The array or collection to iterate over.

No need to manually index into the array …
Handled for you behind the scenes with the
enhanced for loop


When to Use?

When you only need to read elements.

When working with arrays, lists, or collections.

When you don't need an index or to modify elements inside the loop.



Example
---------

 Scanner sc=new Scanner(System.in);
        //array declaration and instantiation
        System.out.println("Enter memory size:");
        int size=sc.nextInt();
        int[] studentMarks=new int[size];

        //initialization
        System.out.println("Enter ur mark:");
//        int k=sc.nextInt();
        for(int i=0;i<studentMarks.length;i++)
        {
            studentMarks[i]=sc.nextInt();

        }
//        studentMarks[0]=8;
//        studentMarks[1]=9;
//        studentMarks[2]=10;
//        studentMarks[3]=6;
//        studentMarks[4]=7;

        //Array access using index always starts from 0
        System.out.println("Mark list.....");
        for(int i=0;i<studentMarks.length;i++)
        {
            System.out.println(studentMarks[i]);

        }
//        System.out.println(studentMarks[0]);
//        System.out.println(studentMarks[1]);
//        System.out.println(studentMarks[2]);
//        System.out.println(studentMarks[3]);
//        System.out.println(studentMarks[4]);
//
//        System.out.println(studentMarks.length);



Example 2
----------

       int[] arr={1,2,3,4,5};

        System.out.println("-----Using for loop-----------");
        for(int i=0;i<arr.length;i++)
        {
            System.out.println(arr[i]);
        }
        System.out.println("-----Using while loop-----------");
        int i=0;
        while(i<arr.length)
        {
            System.out.println(arr[i]);
            i++;
        }
        System.out.println("-----Enhanced for loop---------");
        for(int v:arr)
        {

            System.out.println(v);
        }





